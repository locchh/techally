@startuml TechAlly_System_Architecture
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title TechAlly E-Commerce Platform - System Architecture

Person(customer, "Customer", "End user shopping for smart devices")
Person(admin, "Admin User", "Internal staff managing platform")
Person(vendor, "Vendor", "Product supplier/partner")

System_Boundary(techally, "TechAlly Platform") {
    
    Container_Boundary(frontend, "Frontend Applications") {
        Container(web_app, "Web Application", "React, Next.js", "Customer-facing e-commerce site")
        Container(mobile_app, "Mobile Apps", "React Native", "iOS and Android applications")
        Container(admin_portal, "Admin Portal", "React, TypeScript", "Internal management interface")
        Container(vendor_portal, "Vendor Portal", "React", "Supplier management interface")
    }
    
    Container_Boundary(api_layer, "API Gateway Layer") {
        Container(api_gateway, "API Gateway", "Kong/AWS API Gateway", "Central API routing and authentication")
        Container(graphql, "GraphQL Server", "Apollo Server", "GraphQL API for complex queries")
        Container(websocket, "WebSocket Server", "Socket.io", "Real-time communications")
    }
    
    Container_Boundary(services, "Microservices") {
        Container(auth_service, "Auth Service", "Node.js, JWT", "Authentication and authorization")
        Container(user_service, "User Service", "Node.js", "User management")
        Container(product_service, "Product Service", "Node.js", "Product catalog management")
        Container(order_service, "Order Service", "Node.js", "Order processing")
        Container(payment_service, "Payment Service", "Node.js", "Payment processing")
        Container(inventory_service, "Inventory Service", "Node.js", "Stock management")
        Container(notification_service, "Notification Service", "Node.js", "Email/SMS/Push notifications")
        Container(search_service, "Search Service", "Node.js, Elasticsearch", "Product search")
        Container(recommendation_service, "Recommendation Service", "Python, TensorFlow", "ML-based recommendations")
        Container(analytics_service, "Analytics Service", "Node.js", "Business analytics")
    }
    
    Container_Boundary(data, "Data Layer") {
        ContainerDb(postgres, "PostgreSQL", "PostgreSQL 15", "Primary transactional database")
        ContainerDb(redis, "Redis Cache", "Redis 7", "Session and data caching")
        ContainerDb(elasticsearch, "Elasticsearch", "Elasticsearch 8", "Full-text search index")
        ContainerDb(s3, "S3 Storage", "AWS S3", "Object storage for media")
        ContainerDb(clickhouse, "ClickHouse", "ClickHouse", "Analytics data warehouse")
    }
    
    Container_Boundary(messaging, "Message Queue") {
        Container(kafka, "Apache Kafka", "Kafka", "Event streaming platform")
        Container(rabbitmq, "RabbitMQ", "RabbitMQ", "Message broker")
    }
}

System_Ext(payment_gateway, "Payment Gateways", "Stripe, PayPal, Apple Pay")
System_Ext(shipping_carriers, "Shipping Carriers", "FedEx, UPS, DHL")
System_Ext(email_provider, "Email Service", "SendGrid, AWS SES")
System_Ext(sms_provider, "SMS Service", "Twilio")
System_Ext(cdn, "CDN", "CloudFront")
System_Ext(monitoring, "Monitoring", "DataDog, New Relic")

' Customer interactions
customer --> web_app : "Browse and purchase"
customer --> mobile_app : "Mobile shopping"
customer --> cdn : "Static content"

' Admin interactions  
admin --> admin_portal : "Manage platform"
vendor --> vendor_portal : "Manage products"

' Frontend to API
web_app --> api_gateway : "REST/GraphQL"
mobile_app --> api_gateway : "REST API"
admin_portal --> api_gateway : "REST API"
vendor_portal --> api_gateway : "REST API"

' API Gateway to Services
api_gateway --> auth_service : "Authenticate"
api_gateway --> user_service : "User ops"
api_gateway --> product_service : "Product ops"
api_gateway --> order_service : "Order ops"
api_gateway --> payment_service : "Payment ops"

' WebSocket connections
web_app --> websocket : "Real-time updates"
mobile_app --> websocket : "Push notifications"

' GraphQL connections
web_app --> graphql : "Complex queries"
graphql --> product_service : "Fetch data"
graphql --> user_service : "Fetch data"

' Service to Service
order_service --> inventory_service : "Reserve stock"
order_service --> payment_service : "Process payment"
order_service --> notification_service : "Send notifications"
payment_service --> payment_gateway : "Process transactions"
notification_service --> email_provider : "Send emails"
notification_service --> sms_provider : "Send SMS"

' Data layer connections
auth_service --> redis : "Sessions"
user_service --> postgres : "User data"
product_service --> postgres : "Product data"
product_service --> elasticsearch : "Search index"
order_service --> postgres : "Order data"
payment_service --> postgres : "Transaction data"
inventory_service --> postgres : "Stock data"
product_service --> s3 : "Media files"
analytics_service --> clickhouse : "Analytics data"

' Message queue connections
order_service --> kafka : "Order events"
payment_service --> kafka : "Payment events"
inventory_service --> rabbitmq : "Stock updates"
notification_service --> rabbitmq : "Notifications"

' Monitoring
auth_service --> monitoring : "Metrics"
order_service --> monitoring : "Metrics"
payment_service --> monitoring : "Metrics"

@enduml
