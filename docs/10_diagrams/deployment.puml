@startuml TechAlly_Deployment_Architecture
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml

title TechAlly E-Commerce Platform - Deployment Architecture

Deployment_Node(aws, "AWS Cloud", "Amazon Web Services") {
    
    Deployment_Node(region, "us-east-1", "Primary Region") {
        
        Deployment_Node(vpc, "Production VPC", "10.0.0.0/16") {
            
            Deployment_Node(public_subnet, "Public Subnet", "10.0.1.0/24") {
                
                Deployment_Node(alb, "Application Load Balancer", "AWS ALB") {
                    Container(lb, "Load Balancer", "HTTPS/HTTP", "Routes traffic to ECS services")
                }
                
                Deployment_Node(nat, "NAT Gateway", "AWS NAT") {
                    Container(nat_gw, "NAT Gateway", "Network", "Outbound internet for private subnet")
                }
            }
            
            Deployment_Node(private_subnet_a, "Private Subnet A", "10.0.10.0/24") {
                
                Deployment_Node(ecs_cluster, "ECS Cluster", "AWS Fargate") {
                    
                    Deployment_Node(web_service, "Web Service", "ECS Service") {
                        Container(web_task, "Web Application", "Next.js", "3 tasks, auto-scaling")
                    }
                    
                    Deployment_Node(api_gateway_service, "API Gateway Service", "ECS Service") {
                        Container(api_task, "API Gateway", "Kong", "2 tasks, auto-scaling")
                    }
                }
                
                Deployment_Node(microservices, "Microservices", "ECS Fargate") {
                    
                    Deployment_Node(auth_service, "Auth Service", "ECS Service") {
                        Container(auth_task, "Auth Service", "Node.js", "2 tasks")
                    }
                    
                    Deployment_Node(user_service, "User Service", "ECS Service") {
                        Container(user_task, "User Service", "Node.js", "2 tasks")
                    }
                    
                    Deployment_Node(product_service, "Product Service", "ECS Service") {
                        Container(product_task, "Product Service", "Node.js", "3 tasks")
                    }
                    
                    Deployment_Node(order_service, "Order Service", "ECS Service") {
                        Container(order_task, "Order Service", "Node.js", "3 tasks")
                    }
                    
                    Deployment_Node(payment_service, "Payment Service", "ECS Service") {
                        Container(payment_task, "Payment Service", "Node.js", "2 tasks")
                    }
                }
            }
            
            Deployment_Node(private_subnet_b, "Private Subnet B", "10.0.11.0/24") {
                
                Deployment_Node(data_layer, "Data Layer", "AWS Managed Services") {
                    
                    Deployment_Node(rds, "RDS Aurora", "PostgreSQL 15") {
                        ContainerDb(primary_db, "Primary Database", "PostgreSQL", "Multi-AZ, encrypted")
                        ContainerDb(read_replica, "Read Replica", "PostgreSQL", "Cross-region replica")
                    }
                    
                    Deployment_Node(elasticache, "ElastiCache", "Redis 7") {
                        Container(redis_primary, "Redis Primary", "Cache", "Cluster mode enabled")
                        Container(redis_replica, "Redis Replica", "Cache", "Auto-failover")
                    }
                    
                    Deployment_Node(elasticsearch_domain, "OpenSearch", "OpenSearch 2.x") {
                        ContainerDb(es_cluster, "Search Cluster", "OpenSearch", "3 nodes, encrypted")
                    }
                }
            }
            
            Deployment_Node(private_subnet_c, "Private Subnet C", "10.0.12.0/24") {
                
                Deployment_Node(messaging, "Messaging Layer", "AWS Managed") {
                    
                    Deployment_Node(msk, "Amazon MSK", "Kafka") {
                        Container(kafka_cluster, "Kafka Cluster", "Event Streaming", "3 brokers, encrypted")
                    }
                    
                    Deployment_Node(sqs, "Amazon SQS", "Queue Service") {
                        Container(order_queue, "Order Queue", "SQS", "FIFO queue")
                        Container(notification_queue, "Notification Queue", "SQS", "Standard queue")
                    }
                }
            }
        }
        
        Deployment_Node(storage, "Storage Services", "AWS") {
            
            Deployment_Node(s3, "Amazon S3", "Object Storage") {
                ContainerDb(static_bucket, "Static Assets", "S3", "CloudFront origin")
                ContainerDb(media_bucket, "Media Storage", "S3", "Product images, videos")
                ContainerDb(backup_bucket, "Backup Storage", "S3", "Cross-region replication")
            }
            
            Deployment_Node(efs, "Amazon EFS", "File System") {
                ContainerDb(shared_storage, "Shared Storage", "NFS", "Multi-AZ")
            }
        }
    }
    
    Deployment_Node(global_services, "Global Services", "AWS") {
        
        Deployment_Node(cloudfront, "CloudFront", "CDN") {
            Container(cdn, "Content Delivery", "CDN", "Global edge locations")
        }
        
        Deployment_Node(route53, "Route 53", "DNS") {
            Container(dns, "DNS Service", "DNS", "Health checks, failover")
        }
        
        Deployment_Node(waf, "AWS WAF", "Web Application Firewall") {
            Container(firewall, "WAF Rules", "Security", "OWASP Top 10, rate limiting")
        }
    }
}

Deployment_Node(monitoring, "Monitoring & Observability", "AWS/Third-party") {
    
    Deployment_Node(cloudwatch, "CloudWatch", "AWS") {
        Container(metrics, "Metrics", "Monitoring", "Application and infrastructure metrics")
        Container(logs, "Log Groups", "Logging", "Centralized logging")
        Container(alarms, "Alarms", "Alerting", "Threshold-based alerts")
    }
    
    Deployment_Node(xray, "X-Ray", "AWS") {
        Container(tracing, "Distributed Tracing", "APM", "Request tracing")
    }
    
    Deployment_Node(datadog, "DataDog", "SaaS") {
        Container(apm, "APM", "Monitoring", "Application performance")
        Container(synthetics, "Synthetics", "Monitoring", "Uptime monitoring")
    }
}

Deployment_Node(ci_cd, "CI/CD Pipeline", "AWS/GitHub") {
    
    Deployment_Node(github, "GitHub", "Version Control") {
        Container(repo, "Repository", "Git", "Source code")
        Container(actions, "GitHub Actions", "CI", "Build and test")
    }
    
    Deployment_Node(codepipeline, "CodePipeline", "AWS") {
        Container(pipeline, "Deployment Pipeline", "CD", "Automated deployment")
    }
    
    Deployment_Node(ecr, "ECR", "AWS") {
        Container(registry, "Container Registry", "Docker", "Container images")
    }
    
    Deployment_Node(codedeploy, "CodeDeploy", "AWS") {
        Container(deployment, "Deployment", "Blue/Green", "Zero-downtime deployments")
    }
}

Deployment_Node(dr_region, "us-west-2", "Disaster Recovery Region") {
    
    Deployment_Node(dr_vpc, "DR VPC", "10.1.0.0/16") {
        Container(dr_standby, "Standby Environment", "Passive", "Replicated data, minimal compute")
    }
}

' Relationships
lb --> web_task : "HTTPS"
web_task --> api_task : "HTTP"
api_task --> auth_task : "gRPC"
api_task --> user_task : "gRPC"
api_task --> product_task : "gRPC"
api_task --> order_task : "gRPC"
api_task --> payment_task : "gRPC"

auth_task --> primary_db : "PostgreSQL"
user_task --> primary_db : "PostgreSQL"
product_task --> primary_db : "PostgreSQL"
order_task --> primary_db : "PostgreSQL"
payment_task --> primary_db : "PostgreSQL"

auth_task --> redis_primary : "Redis Protocol"
product_task --> redis_primary : "Redis Protocol"

product_task --> es_cluster : "HTTPS"
order_task --> kafka_cluster : "Kafka Protocol"
order_task --> order_queue : "SQS API"

cdn --> static_bucket : "S3 API"
web_task --> media_bucket : "S3 API"

dns --> lb : "DNS Resolution"
firewall --> lb : "Filter Traffic"

primary_db --> read_replica : "Replication"
primary_db --> backup_bucket : "Automated Backups"

actions --> ecr : "Push Images"
pipeline --> deployment : "Deploy"
deployment --> ecs_cluster : "Update Services"

metrics --> alarms : "Trigger"
tracing --> apm : "Export"

@enduml
