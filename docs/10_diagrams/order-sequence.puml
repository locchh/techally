@startuml Order_Processing_Sequence
!theme plain
title Order Processing Sequence - TechAlly Platform

actor Customer as customer
participant "Web/Mobile\nApp" as app
participant "API\nGateway" as api
participant "Order\nService" as order
participant "Payment\nService" as payment
participant "Inventory\nService" as inventory
participant "Notification\nService" as notification
database "PostgreSQL" as db
database "Redis\nCache" as cache
participant "Payment\nGateway" as gateway
participant "Email\nProvider" as email

== Order Creation ==

customer -> app : Browse products
app -> api : GET /products
api -> cache : Check cache
alt Cache hit
    cache --> api : Cached data
else Cache miss
    api -> order : Get products
    order -> db : Query products
    db --> order : Product data
    order --> api : Product list
    api -> cache : Update cache
end
api --> app : Products
app --> customer : Display products

customer -> app : Add to cart
app -> api : POST /cart/items
api -> order : Add item
order -> inventory : Check availability
inventory -> db : Query stock
db --> inventory : Stock level
inventory --> order : Available

alt Stock available
    order -> cache : Update cart
    order --> api : Item added
    api --> app : Success
    app --> customer : Cart updated
else Out of stock
    order --> api : Out of stock
    api --> app : Error
    app --> customer : Item unavailable
end

== Checkout Process ==

customer -> app : Proceed to checkout
app -> api : POST /checkout/init
api -> order : Create checkout session
order -> db : Store session
order --> api : Session ID
api --> app : Checkout data
app --> customer : Show checkout form

customer -> app : Enter shipping info
app -> api : POST /checkout/shipping
api -> order : Validate address
order --> api : Shipping options
api --> app : Options
app --> customer : Select shipping

customer -> app : Enter payment info
app -> api : POST /checkout/payment
api -> payment : Create payment intent
payment -> gateway : Initialize payment
gateway --> payment : Payment token
payment --> api : Token
api --> app : Payment form
app --> customer : Confirm payment

== Order Confirmation ==

customer -> app : Place order
app -> api : POST /orders
api -> order : Create order

group Transaction Processing
    order -> payment : Process payment
    payment -> gateway : Charge card
    gateway --> payment : Transaction result
    
    alt Payment successful
        payment --> order : Payment confirmed
        order -> inventory : Reserve stock
        inventory -> db : Update inventory
        db --> inventory : Stock reserved
        inventory --> order : Reservation confirmed
        order -> db : Save order
        db --> order : Order saved
        order -> notification : Send confirmation
        notification -> email : Send email
        email --> notification : Email sent
        notification --> order : Notification sent
        order --> api : Order created
        api --> app : Success
        app --> customer : Order confirmation
    else Payment failed
        payment --> order : Payment failed
        order --> api : Error
        api --> app : Payment error
        app --> customer : Payment failed
    end
end

== Post-Order Processing ==

order -> notification : Trigger events
notification ->> order : Async processing

group Async Operations
    notification -> email : Order confirmation
    notification -> inventory : Update reports
    notification -> payment : Update accounting
end

== Order Status Updates ==

loop Order fulfillment
    order -> db : Update status
    order -> notification : Status changed
    notification -> email : Send update
    notification -> app : Push notification
    app --> customer : Status update
end

@enduml
